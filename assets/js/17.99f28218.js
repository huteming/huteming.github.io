(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{361:function(v,_,t){"use strict";t.r(_);var r=t(9),a=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[v._v("#")]),v._v(" 定义")]),v._v(" "),t("p",[v._v("树是 n 个节点的有限集。当 n=0 时，称为"),t("code",[v._v("空树")]),v._v("。在任意一个非空树中，有如下特点。")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("有且仅有一个特定的称为根的节点。")])]),v._v(" "),t("li",[t("p",[v._v("当n>1时，其余节点可分为m（m>0）个互不相交的有限集，每一个集合本身又是一个树，并称为根的子树。")])])]),v._v(" "),t("h2",{attrs:{id:"标准树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准树"}},[v._v("#")]),v._v(" 标准树")]),v._v(" "),t("p",[t("img",{attrs:{src:"/algorithm/%E6%A0%87%E5%87%86%E6%A0%91%E7%BB%93%E6%9E%84.png",alt:"标准树结构"}})]),v._v(" "),t("p",[v._v("节点1是"),t("strong",[v._v("根节点(root)")]),v._v(";节点5、6、7、8是树的末端，没有“孩 子”，被称为"),t("strong",[v._v("叶子节点(leaf)")]),v._v("。图中的虚线部分，是根节点1的其中一个"),t("strong",[v._v("子树")])]),v._v(" "),t("h2",{attrs:{id:"节点关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#节点关系"}},[v._v("#")]),v._v(" 节点关系")]),v._v(" "),t("p",[t("img",{attrs:{src:"/tree/tree-relation.png",alt:"节点关系"}})]),v._v(" "),t("p",[v._v("节点4的上一级节点，是节点4的"),t("strong",[v._v("父节点(parent)")]),v._v(";从节点4衍生出 来的节点，是节点4的"),t("strong",[v._v("孩子节点(child)")]),v._v(";和节点4同级，由同一个父节点衍生出来 的节点，是节点4的"),t("strong",[v._v("兄弟节点(sibling)")]),v._v("。")]),v._v(" "),t("p",[v._v("树的最大层级数，被称为树的高度或深度。显然，上图这个树的高度是4")]),v._v(" "),t("h2",{attrs:{id:"几个常见概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#几个常见概念"}},[v._v("#")]),v._v(" 几个常见概念")]),v._v(" "),t("ul",[t("li",[v._v("什么是树")])]),v._v(" "),t("p",[v._v("树是n个节点的有限集，有且仅有一个特定的称为根的节点。当n>1时，其余节 点可分为m个互不相交的有限集，每一个集合本身又是一个树，并称为根的子树。")]),v._v(" "),t("ul",[t("li",[v._v("什么是二叉树")])]),v._v(" "),t("p",[v._v("二叉树是树的一种特殊形式，每一个节点最多有两个孩子节点。二叉树包含完全二叉树和满二叉树两种特殊形式。")]),v._v(" "),t("ul",[t("li",[v._v("二叉树的遍历方式有几种")])]),v._v(" "),t("p",[v._v("根据遍历节点之间的关系，可以分为前序遍历、中序遍历、后序遍历、层序遍 历这4种方式;从更宏观的角度划分，可以划分为深度优先遍历和广度优先遍历两大 类。")]),v._v(" "),t("ul",[t("li",[v._v("什么是二叉堆")])]),v._v(" "),t("p",[v._v("二叉堆是一种特殊的完全二叉树，分为最大堆和最小堆。")]),v._v(" "),t("p",[v._v("在最大堆中，任何一个父节点的值，都大于或等于它左、右孩子节点的值。")]),v._v(" "),t("p",[v._v("在最小堆中，任何一个父节点的值，都小于或等于它左、右孩子节点的值。")]),v._v(" "),t("ul",[t("li",[v._v("什么是优先队列")])]),v._v(" "),t("p",[v._v("优先队列分为最大优先队列和最小优先队列。")]),v._v(" "),t("p",[v._v("在最大优先队列中，无论入队顺序如何，当前最大的元素都会优先出队，这是基于最大堆实现的。")]),v._v(" "),t("p",[v._v("在最小优先队列中，无论入队顺序如何，当前最小的元素都会优先出队，这是基于最小堆实现的。")])])}),[],!1,null,null,null);_.default=a.exports}}]);